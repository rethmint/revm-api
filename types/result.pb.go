// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.1
// source: result.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HaltReasonEnum int32

const (
	HaltReasonEnum_HALT_REASON_ENUM_UNSPECIFIED_UNSPECIFIED          HaltReasonEnum = 0
	HaltReasonEnum_HALT_REASON_ENUM_OUT_OF_GAS_BASIC                 HaltReasonEnum = 1
	HaltReasonEnum_HALT_REASON_ENUM_OUT_OF_GAS_MEMORY_LIMIT          HaltReasonEnum = 2
	HaltReasonEnum_HALT_REASON_ENUM_OUT_OF_GAS_MEMORY                HaltReasonEnum = 3
	HaltReasonEnum_HALT_REASON_ENUM_OUT_OF_GAS_PRECOMPILE            HaltReasonEnum = 4
	HaltReasonEnum_HALT_REASON_ENUM_OUT_OF_GAS_INVALID_OPERAND       HaltReasonEnum = 5
	HaltReasonEnum_HALT_REASON_ENUM_OUT_OF_GAS_REENTRANCY_SENTRY     HaltReasonEnum = 6
	HaltReasonEnum_HALT_REASON_ENUM_OPCODE_NOT_FOUND                 HaltReasonEnum = 7
	HaltReasonEnum_HALT_REASON_ENUM_INVALID_FE_OPCODE                HaltReasonEnum = 8
	HaltReasonEnum_HALT_REASON_ENUM_INVALID_JUMP                     HaltReasonEnum = 9
	HaltReasonEnum_HALT_REASON_ENUM_NOT_ACTIVATED                    HaltReasonEnum = 10
	HaltReasonEnum_HALT_REASON_ENUM_STACK_UNDERFLOW                  HaltReasonEnum = 11
	HaltReasonEnum_HALT_REASON_ENUM_STACK_OVERFLOW                   HaltReasonEnum = 12
	HaltReasonEnum_HALT_REASON_ENUM_OUT_OF_OFFSET                    HaltReasonEnum = 13
	HaltReasonEnum_HALT_REASON_ENUM_CREATE_COLLISION                 HaltReasonEnum = 14
	HaltReasonEnum_HALT_REASON_ENUM_PRECOMPILE_ERROR                 HaltReasonEnum = 15
	HaltReasonEnum_HALT_REASON_ENUM_NONCE_OVERFLOW                   HaltReasonEnum = 16
	HaltReasonEnum_HALT_REASON_ENUM_CREATE_CONTRACT_SIZE_LIMIT       HaltReasonEnum = 17
	HaltReasonEnum_HALT_REASON_ENUM_CREATE_CONTRACT_STARTING_WITH_EF HaltReasonEnum = 18
	HaltReasonEnum_HALT_REASON_ENUM_CREATE_INIT_CODE_SIZE_LIMIT      HaltReasonEnum = 19
	HaltReasonEnum_HALT_REASON_ENUM_OVERFLOW_PAYMENT                 HaltReasonEnum = 20
	HaltReasonEnum_HALT_REASON_ENUM_STATE_CHANGE_DURING_STATIC_CALL  HaltReasonEnum = 21
	HaltReasonEnum_HALT_REASON_ENUM_CALL_NOT_ALLOWED_INSIDE_STATIC   HaltReasonEnum = 22
	HaltReasonEnum_HALT_REASON_ENUM_OUT_OF_FUNDS                     HaltReasonEnum = 23
	HaltReasonEnum_HALT_REASON_ENUM_CALL_TOO_DEEP                    HaltReasonEnum = 24
	HaltReasonEnum_HALT_REASON_ENUM_EOF_FUNCTION_STACK_OVERFLOW      HaltReasonEnum = 25
	HaltReasonEnum_HALT_REASON_ENUM_INVALID_EXTCALL_TARGET           HaltReasonEnum = 26
	HaltReasonEnum_HALT_REASON_ENUM_EOF_AUX_DATA_OVERFLOW            HaltReasonEnum = 27
	HaltReasonEnum_HALT_REASON_ENUM_EOF_AUX_DATA_TOO_SMALL           HaltReasonEnum = 28
)

// Enum value maps for HaltReasonEnum.
var (
	HaltReasonEnum_name = map[int32]string{
		0:  "HALT_REASON_ENUM_UNSPECIFIED_UNSPECIFIED",
		1:  "HALT_REASON_ENUM_OUT_OF_GAS_BASIC",
		2:  "HALT_REASON_ENUM_OUT_OF_GAS_MEMORY_LIMIT",
		3:  "HALT_REASON_ENUM_OUT_OF_GAS_MEMORY",
		4:  "HALT_REASON_ENUM_OUT_OF_GAS_PRECOMPILE",
		5:  "HALT_REASON_ENUM_OUT_OF_GAS_INVALID_OPERAND",
		6:  "HALT_REASON_ENUM_OUT_OF_GAS_REENTRANCY_SENTRY",
		7:  "HALT_REASON_ENUM_OPCODE_NOT_FOUND",
		8:  "HALT_REASON_ENUM_INVALID_FE_OPCODE",
		9:  "HALT_REASON_ENUM_INVALID_JUMP",
		10: "HALT_REASON_ENUM_NOT_ACTIVATED",
		11: "HALT_REASON_ENUM_STACK_UNDERFLOW",
		12: "HALT_REASON_ENUM_STACK_OVERFLOW",
		13: "HALT_REASON_ENUM_OUT_OF_OFFSET",
		14: "HALT_REASON_ENUM_CREATE_COLLISION",
		15: "HALT_REASON_ENUM_PRECOMPILE_ERROR",
		16: "HALT_REASON_ENUM_NONCE_OVERFLOW",
		17: "HALT_REASON_ENUM_CREATE_CONTRACT_SIZE_LIMIT",
		18: "HALT_REASON_ENUM_CREATE_CONTRACT_STARTING_WITH_EF",
		19: "HALT_REASON_ENUM_CREATE_INIT_CODE_SIZE_LIMIT",
		20: "HALT_REASON_ENUM_OVERFLOW_PAYMENT",
		21: "HALT_REASON_ENUM_STATE_CHANGE_DURING_STATIC_CALL",
		22: "HALT_REASON_ENUM_CALL_NOT_ALLOWED_INSIDE_STATIC",
		23: "HALT_REASON_ENUM_OUT_OF_FUNDS",
		24: "HALT_REASON_ENUM_CALL_TOO_DEEP",
		25: "HALT_REASON_ENUM_EOF_FUNCTION_STACK_OVERFLOW",
		26: "HALT_REASON_ENUM_INVALID_EXTCALL_TARGET",
		27: "HALT_REASON_ENUM_EOF_AUX_DATA_OVERFLOW",
		28: "HALT_REASON_ENUM_EOF_AUX_DATA_TOO_SMALL",
	}
	HaltReasonEnum_value = map[string]int32{
		"HALT_REASON_ENUM_UNSPECIFIED_UNSPECIFIED":          0,
		"HALT_REASON_ENUM_OUT_OF_GAS_BASIC":                 1,
		"HALT_REASON_ENUM_OUT_OF_GAS_MEMORY_LIMIT":          2,
		"HALT_REASON_ENUM_OUT_OF_GAS_MEMORY":                3,
		"HALT_REASON_ENUM_OUT_OF_GAS_PRECOMPILE":            4,
		"HALT_REASON_ENUM_OUT_OF_GAS_INVALID_OPERAND":       5,
		"HALT_REASON_ENUM_OUT_OF_GAS_REENTRANCY_SENTRY":     6,
		"HALT_REASON_ENUM_OPCODE_NOT_FOUND":                 7,
		"HALT_REASON_ENUM_INVALID_FE_OPCODE":                8,
		"HALT_REASON_ENUM_INVALID_JUMP":                     9,
		"HALT_REASON_ENUM_NOT_ACTIVATED":                    10,
		"HALT_REASON_ENUM_STACK_UNDERFLOW":                  11,
		"HALT_REASON_ENUM_STACK_OVERFLOW":                   12,
		"HALT_REASON_ENUM_OUT_OF_OFFSET":                    13,
		"HALT_REASON_ENUM_CREATE_COLLISION":                 14,
		"HALT_REASON_ENUM_PRECOMPILE_ERROR":                 15,
		"HALT_REASON_ENUM_NONCE_OVERFLOW":                   16,
		"HALT_REASON_ENUM_CREATE_CONTRACT_SIZE_LIMIT":       17,
		"HALT_REASON_ENUM_CREATE_CONTRACT_STARTING_WITH_EF": 18,
		"HALT_REASON_ENUM_CREATE_INIT_CODE_SIZE_LIMIT":      19,
		"HALT_REASON_ENUM_OVERFLOW_PAYMENT":                 20,
		"HALT_REASON_ENUM_STATE_CHANGE_DURING_STATIC_CALL":  21,
		"HALT_REASON_ENUM_CALL_NOT_ALLOWED_INSIDE_STATIC":   22,
		"HALT_REASON_ENUM_OUT_OF_FUNDS":                     23,
		"HALT_REASON_ENUM_CALL_TOO_DEEP":                    24,
		"HALT_REASON_ENUM_EOF_FUNCTION_STACK_OVERFLOW":      25,
		"HALT_REASON_ENUM_INVALID_EXTCALL_TARGET":           26,
		"HALT_REASON_ENUM_EOF_AUX_DATA_OVERFLOW":            27,
		"HALT_REASON_ENUM_EOF_AUX_DATA_TOO_SMALL":           28,
	}
)

func (x HaltReasonEnum) Enum() *HaltReasonEnum {
	p := new(HaltReasonEnum)
	*p = x
	return p
}

func (x HaltReasonEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HaltReasonEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_result_proto_enumTypes[0].Descriptor()
}

func (HaltReasonEnum) Type() protoreflect.EnumType {
	return &file_result_proto_enumTypes[0]
}

func (x HaltReasonEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HaltReasonEnum.Descriptor instead.
func (HaltReasonEnum) EnumDescriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{0}
}

type SuccessReasonEnum int32

const (
	SuccessReasonEnum_SUCCESS_REASON_ENUM_UNSPECIFIED         SuccessReasonEnum = 0
	SuccessReasonEnum_SUCCESS_REASON_ENUM_STOP                SuccessReasonEnum = 1
	SuccessReasonEnum_SUCCESS_REASON_ENUM_RETURN              SuccessReasonEnum = 2
	SuccessReasonEnum_SUCCESS_REASON_ENUM_SELF_DESTRUCT       SuccessReasonEnum = 3
	SuccessReasonEnum_SUCCESS_REASON_ENUM_EOF_RETURN_CONTRACT SuccessReasonEnum = 4
)

// Enum value maps for SuccessReasonEnum.
var (
	SuccessReasonEnum_name = map[int32]string{
		0: "SUCCESS_REASON_ENUM_UNSPECIFIED",
		1: "SUCCESS_REASON_ENUM_STOP",
		2: "SUCCESS_REASON_ENUM_RETURN",
		3: "SUCCESS_REASON_ENUM_SELF_DESTRUCT",
		4: "SUCCESS_REASON_ENUM_EOF_RETURN_CONTRACT",
	}
	SuccessReasonEnum_value = map[string]int32{
		"SUCCESS_REASON_ENUM_UNSPECIFIED":         0,
		"SUCCESS_REASON_ENUM_STOP":                1,
		"SUCCESS_REASON_ENUM_RETURN":              2,
		"SUCCESS_REASON_ENUM_SELF_DESTRUCT":       3,
		"SUCCESS_REASON_ENUM_EOF_RETURN_CONTRACT": 4,
	}
)

func (x SuccessReasonEnum) Enum() *SuccessReasonEnum {
	p := new(SuccessReasonEnum)
	*p = x
	return p
}

func (x SuccessReasonEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SuccessReasonEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_result_proto_enumTypes[1].Descriptor()
}

func (SuccessReasonEnum) Type() protoreflect.EnumType {
	return &file_result_proto_enumTypes[1]
}

func (x SuccessReasonEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SuccessReasonEnum.Descriptor instead.
func (SuccessReasonEnum) EnumDescriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{1}
}

type Topic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value [][]byte `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *Topic) Reset() {
	*x = Topic{}
	mi := &file_result_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Topic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topic) ProtoMessage() {}

func (x *Topic) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topic.ProtoReflect.Descriptor instead.
func (*Topic) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{0}
}

func (x *Topic) GetValue() [][]byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type LogData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topics []*Topic `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	Data   [][]byte `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *LogData) Reset() {
	*x = LogData{}
	mi := &file_result_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogData) ProtoMessage() {}

func (x *LogData) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogData.ProtoReflect.Descriptor instead.
func (*LogData) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{1}
}

func (x *LogData) GetTopics() []*Topic {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *LogData) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address [][]byte `protobuf:"bytes,1,rep,name=address,proto3" json:"address,omitempty"`
	Data    *LogData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Log) Reset() {
	*x = Log{}
	mi := &file_result_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{2}
}

func (x *Log) GetAddress() [][]byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Log) GetData() *LogData {
	if x != nil {
		return x.Data
	}
	return nil
}

type Success struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason          SuccessReasonEnum `protobuf:"varint,1,opt,name=reason,proto3,enum=evm.v1.SuccessReasonEnum" json:"reason,omitempty"`
	GasUsed         uint64            `protobuf:"varint,2,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	GasRefunded     uint64            `protobuf:"varint,3,opt,name=gas_refunded,json=gasRefunded,proto3" json:"gas_refunded,omitempty"`
	Logs            []*Log            `protobuf:"bytes,4,rep,name=logs,proto3" json:"logs,omitempty"`
	Output          [][]byte          `protobuf:"bytes,5,rep,name=output,proto3" json:"output,omitempty"`
	DeployedAddress [][]byte          `protobuf:"bytes,6,rep,name=deployed_address,json=deployedAddress,proto3" json:"deployed_address,omitempty"`
}

func (x *Success) Reset() {
	*x = Success{}
	mi := &file_result_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Success) ProtoMessage() {}

func (x *Success) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Success.ProtoReflect.Descriptor instead.
func (*Success) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{3}
}

func (x *Success) GetReason() SuccessReasonEnum {
	if x != nil {
		return x.Reason
	}
	return SuccessReasonEnum_SUCCESS_REASON_ENUM_UNSPECIFIED
}

func (x *Success) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *Success) GetGasRefunded() uint64 {
	if x != nil {
		return x.GasRefunded
	}
	return 0
}

func (x *Success) GetLogs() []*Log {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *Success) GetOutput() [][]byte {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *Success) GetDeployedAddress() [][]byte {
	if x != nil {
		return x.DeployedAddress
	}
	return nil
}

type Revert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasUsed uint64   `protobuf:"varint,1,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Output  [][]byte `protobuf:"bytes,2,rep,name=output,proto3" json:"output,omitempty"`
}

func (x *Revert) Reset() {
	*x = Revert{}
	mi := &file_result_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Revert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Revert) ProtoMessage() {}

func (x *Revert) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Revert.ProtoReflect.Descriptor instead.
func (*Revert) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{4}
}

func (x *Revert) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *Revert) GetOutput() [][]byte {
	if x != nil {
		return x.Output
	}
	return nil
}

type Halt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason  HaltReasonEnum `protobuf:"varint,1,opt,name=reason,proto3,enum=evm.v1.HaltReasonEnum" json:"reason,omitempty"`
	GasUsed uint64         `protobuf:"varint,2,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
}

func (x *Halt) Reset() {
	*x = Halt{}
	mi := &file_result_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Halt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Halt) ProtoMessage() {}

func (x *Halt) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Halt.ProtoReflect.Descriptor instead.
func (*Halt) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{5}
}

func (x *Halt) GetReason() HaltReasonEnum {
	if x != nil {
		return x.Reason
	}
	return HaltReasonEnum_HALT_REASON_ENUM_UNSPECIFIED_UNSPECIFIED
}

func (x *Halt) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_result_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{6}
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type EvmResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*EvmResult_Success
	//	*EvmResult_Revert
	//	*EvmResult_Halt
	//	*EvmResult_Error
	Result isEvmResult_Result `protobuf_oneof:"result"`
}

func (x *EvmResult) Reset() {
	*x = EvmResult{}
	mi := &file_result_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvmResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvmResult) ProtoMessage() {}

func (x *EvmResult) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvmResult.ProtoReflect.Descriptor instead.
func (*EvmResult) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{7}
}

func (m *EvmResult) GetResult() isEvmResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *EvmResult) GetSuccess() *Success {
	if x, ok := x.GetResult().(*EvmResult_Success); ok {
		return x.Success
	}
	return nil
}

func (x *EvmResult) GetRevert() *Revert {
	if x, ok := x.GetResult().(*EvmResult_Revert); ok {
		return x.Revert
	}
	return nil
}

func (x *EvmResult) GetHalt() *Halt {
	if x, ok := x.GetResult().(*EvmResult_Halt); ok {
		return x.Halt
	}
	return nil
}

func (x *EvmResult) GetError() *Error {
	if x, ok := x.GetResult().(*EvmResult_Error); ok {
		return x.Error
	}
	return nil
}

type isEvmResult_Result interface {
	isEvmResult_Result()
}

type EvmResult_Success struct {
	Success *Success `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type EvmResult_Revert struct {
	Revert *Revert `protobuf:"bytes,2,opt,name=revert,proto3,oneof"`
}

type EvmResult_Halt struct {
	Halt *Halt `protobuf:"bytes,3,opt,name=halt,proto3,oneof"`
}

type EvmResult_Error struct {
	Error *Error `protobuf:"bytes,4,opt,name=error,proto3,oneof"`
}

func (*EvmResult_Success) isEvmResult_Result() {}

func (*EvmResult_Revert) isEvmResult_Result() {}

func (*EvmResult_Halt) isEvmResult_Result() {}

func (*EvmResult_Error) isEvmResult_Result() {}

var File_result_proto protoreflect.FileDescriptor

var file_result_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x22, 0x1d, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x44, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x25, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52,
	0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x44, 0x0a, 0x03, 0x4c,
	0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x76, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xde, 0x01, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x67,
	0x61, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x67, 0x61, 0x73, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x1f,
	0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65,
	0x76, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x3b, 0x0a, 0x06, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22,
	0x51, 0x0a, 0x04, 0x48, 0x61, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x61, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75,
	0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73,
	0x65, 0x64, 0x22, 0x21, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x09, 0x45, 0x76, 0x6d, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x28, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74,
	0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x68, 0x61,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x61, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x04, 0x68, 0x61, 0x6c, 0x74, 0x12, 0x25,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2a,
	0xee, 0x09, 0x0a, 0x0e, 0x48, 0x61, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x28, 0x48, 0x41, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x25, 0x0a, 0x21, 0x48, 0x41, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x47, 0x41, 0x53, 0x5f,
	0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x48, 0x41, 0x4c, 0x54, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4f, 0x55, 0x54, 0x5f,
	0x4f, 0x46, 0x5f, 0x47, 0x41, 0x53, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x48, 0x41, 0x4c, 0x54, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46,
	0x5f, 0x47, 0x41, 0x53, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10, 0x03, 0x12, 0x2a, 0x0a,
	0x26, 0x48, 0x41, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x47, 0x41, 0x53, 0x5f, 0x50, 0x52, 0x45,
	0x43, 0x4f, 0x4d, 0x50, 0x49, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x2f, 0x0a, 0x2b, 0x48, 0x41, 0x4c,
	0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4f, 0x55,
	0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x47, 0x41, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x31, 0x0a, 0x2d, 0x48, 0x41,
	0x4c, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4f,
	0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x47, 0x41, 0x53, 0x5f, 0x52, 0x45, 0x45, 0x4e, 0x54, 0x52,
	0x41, 0x4e, 0x43, 0x59, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x06, 0x12, 0x25, 0x0a,
	0x21, 0x48, 0x41, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x07, 0x12, 0x26, 0x0a, 0x22, 0x48, 0x41, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x46, 0x45, 0x5f, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d,
	0x48, 0x41, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4a, 0x55, 0x4d, 0x50, 0x10, 0x09, 0x12,
	0x22, 0x0a, 0x1e, 0x48, 0x41, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x0a, 0x12, 0x24, 0x0a, 0x20, 0x48, 0x41, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x55, 0x4e,
	0x44, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x0b, 0x12, 0x23, 0x0a, 0x1f, 0x48, 0x41, 0x4c,
	0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x53, 0x54,
	0x41, 0x43, 0x4b, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x0c, 0x12, 0x22,
	0x0a, 0x1e, 0x48, 0x41, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54,
	0x10, 0x0d, 0x12, 0x25, 0x0a, 0x21, 0x48, 0x41, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f,
	0x4c, 0x4c, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x0e, 0x12, 0x25, 0x0a, 0x21, 0x48, 0x41, 0x4c,
	0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x50, 0x52,
	0x45, 0x43, 0x4f, 0x4d, 0x50, 0x49, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0f,
	0x12, 0x23, 0x0a, 0x1f, 0x48, 0x41, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4e, 0x4f, 0x4e, 0x43, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x46,
	0x4c, 0x4f, 0x57, 0x10, 0x10, 0x12, 0x2f, 0x0a, 0x2b, 0x48, 0x41, 0x4c, 0x54, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x10, 0x11, 0x12, 0x35, 0x0a, 0x31, 0x48, 0x41, 0x4c, 0x54, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x45, 0x46, 0x10, 0x12, 0x12, 0x30, 0x0a,
	0x2c, 0x48, 0x41, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x13, 0x12,
	0x25, 0x0a, 0x21, 0x48, 0x41, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x50, 0x41, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x14, 0x12, 0x34, 0x0a, 0x30, 0x48, 0x41, 0x4c, 0x54, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x15, 0x12, 0x33, 0x0a, 0x2f,
	0x48, 0x41, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45,
	0x44, 0x5f, 0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10,
	0x16, 0x12, 0x21, 0x0a, 0x1d, 0x48, 0x41, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x46, 0x55, 0x4e,
	0x44, 0x53, 0x10, 0x17, 0x12, 0x22, 0x0a, 0x1e, 0x48, 0x41, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x4f,
	0x4f, 0x5f, 0x44, 0x45, 0x45, 0x50, 0x10, 0x18, 0x12, 0x30, 0x0a, 0x2c, 0x48, 0x41, 0x4c, 0x54,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x45, 0x4f, 0x46,
	0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f,
	0x4f, 0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x19, 0x12, 0x2b, 0x0a, 0x27, 0x48, 0x41,
	0x4c, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x54, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x54,
	0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x1a, 0x12, 0x2a, 0x0a, 0x26, 0x48, 0x41, 0x4c, 0x54, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x45, 0x4f, 0x46, 0x5f,
	0x41, 0x55, 0x58, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f,
	0x57, 0x10, 0x1b, 0x12, 0x2b, 0x0a, 0x27, 0x48, 0x41, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x45, 0x4f, 0x46, 0x5f, 0x41, 0x55, 0x58, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x1c,
	0x2a, 0xca, 0x01, 0x0a, 0x11, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x10, 0x03,
	0x12, 0x2b, 0x0a, 0x27, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x45, 0x4f, 0x46, 0x5f, 0x52, 0x45, 0x54, 0x55,
	0x52, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x04, 0x42, 0x0a, 0x5a,
	0x08, 0x2e, 0x2e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_result_proto_rawDescOnce sync.Once
	file_result_proto_rawDescData = file_result_proto_rawDesc
)

func file_result_proto_rawDescGZIP() []byte {
	file_result_proto_rawDescOnce.Do(func() {
		file_result_proto_rawDescData = protoimpl.X.CompressGZIP(file_result_proto_rawDescData)
	})
	return file_result_proto_rawDescData
}

var file_result_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_result_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_result_proto_goTypes = []any{
	(HaltReasonEnum)(0),    // 0: evm.v1.HaltReasonEnum
	(SuccessReasonEnum)(0), // 1: evm.v1.SuccessReasonEnum
	(*Topic)(nil),          // 2: evm.v1.Topic
	(*LogData)(nil),        // 3: evm.v1.LogData
	(*Log)(nil),            // 4: evm.v1.Log
	(*Success)(nil),        // 5: evm.v1.Success
	(*Revert)(nil),         // 6: evm.v1.Revert
	(*Halt)(nil),           // 7: evm.v1.Halt
	(*Error)(nil),          // 8: evm.v1.Error
	(*EvmResult)(nil),      // 9: evm.v1.EvmResult
}
var file_result_proto_depIdxs = []int32{
	2, // 0: evm.v1.LogData.topics:type_name -> evm.v1.Topic
	3, // 1: evm.v1.Log.data:type_name -> evm.v1.LogData
	1, // 2: evm.v1.Success.reason:type_name -> evm.v1.SuccessReasonEnum
	4, // 3: evm.v1.Success.logs:type_name -> evm.v1.Log
	0, // 4: evm.v1.Halt.reason:type_name -> evm.v1.HaltReasonEnum
	5, // 5: evm.v1.EvmResult.success:type_name -> evm.v1.Success
	6, // 6: evm.v1.EvmResult.revert:type_name -> evm.v1.Revert
	7, // 7: evm.v1.EvmResult.halt:type_name -> evm.v1.Halt
	8, // 8: evm.v1.EvmResult.error:type_name -> evm.v1.Error
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_result_proto_init() }
func file_result_proto_init() {
	if File_result_proto != nil {
		return
	}
	file_result_proto_msgTypes[7].OneofWrappers = []any{
		(*EvmResult_Success)(nil),
		(*EvmResult_Revert)(nil),
		(*EvmResult_Halt)(nil),
		(*EvmResult_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_result_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_result_proto_goTypes,
		DependencyIndexes: file_result_proto_depIdxs,
		EnumInfos:         file_result_proto_enumTypes,
		MessageInfos:      file_result_proto_msgTypes,
	}.Build()
	File_result_proto = out.File
	file_result_proto_rawDesc = nil
	file_result_proto_goTypes = nil
	file_result_proto_depIdxs = nil
}
